* {
  padding: 0;
  margin: 0;

  box-sizing: border-box;

  font-family: "Baloo Bhai 2", cursive;
}
/* * { padding: 0; margin: 0; }: กำหนดให้ padding และ margin ของทุกองค์ประกอบในเอกสาร HTML เป็น 0 โดยเฉพาะเวลาเริ่มต้นใช้งานหน้าเว็บ ซึ่งช่วยให้กำหนดระยะห่างและช่องว่างระหว่างองค์ประกอบให้เป็นค่าเริ่มต้น
box-sizing: border-box;: กำหนดให้การคำนวณขนาดขององค์ประกอบนั้นนำความกว้างและความสูงขององค์ประกอบนั้นมานับรวมกับ padding และ border ที่กำหนดไว้ด้วย เพื่อให้ขนาดที่กำหนดไว้เป็นขนาดสุดท้ายขององค์ประกอบ
font-family: "Baloo Bhai 2", cursive;: กำหนดให้ font-family ของเนื้อหาในเอกสาร HTML เป็น "Baloo Bhai 2" หรือหากไม่สามารถใช้ font นี้ได้ จะใช้ font แบบ cursive แทน ซึ่งช่วยให้กำหนดรูปแบบตัวอักษรของเนื้อหาในเว็บไซต์โดยรวม */
nav {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem 2rem;

  background-color: #282828;

  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  z-index: 9999;
  overflow: hidden;
}

/*display: flex;: กำหนดให้องค์ประกอบ <nav> มีการแสดงผลโดยใช้ flexbox ซึ่งช่วยให้องค์ประกอบภายใน <nav> สามารถจัดวางแบบ Flexbox ได้
justify-content: space-between;: จัดการระยะห่างแนวแกน X ขององค์ประกอบภายใน <nav> โดยให้มีการกระจายตัวในระหว่างสองขอบขององค์ประกอบ
align-items: center;: จัดการการจัดวางตามแนวตั้งขององค์ประกอบภายใน <nav> โดยให้มีการจัดวางตามแนวตรงกึ่งกลาง
padding: 1rem 2rem;: กำหนดความห่างของขอบภายใน <nav> ที่มีค่าเท่ากับ 1 หน่วย (rem) สำหรับด้านบนและด้านล่าง และมีค่าเท่ากับ 2 หน่วย (rem) สำหรับด้านซ้ายและด้านขวา
background-color: #282828;: กำหนดสีพื้นหลังขององค์ประกอบ <nav> เป็นสีเทาเข้ม
position: fixed;: กำหนดให้องค์ประกอบ <nav> มีตำแหน่งที่แน่นอนและไม่เคลื่อนไหว โดยอ้างอิงจากการเลื่อนของหน้าเว็บ
top: 0; left: 0; width: 100%;: กำหนดให้องค์ประกอบ <nav> มีความกว้างเท่ากับ 100% ของหน้าเว็บ และตำแหน่งที่บน-ซ้ายเพื่อให้อยู่บนสุดและชิดด้านซ้ายของหน้าเว็บ
z-index: 9999;: กำหนดค่า z-index เพื่อกำหนดลำดับแสดงขององค์ประกอบ <nav> เมื่อมีการแสดงผลพร้อมกับองค์ประกอบอื่น ๆ ในหน้าเว็บ
overflow: hidden;: กำหนดให้องค์ประกอบ <nav> ไม่แสดงเนื้อหาที่เกินขอบเขตของมันเอง*/

ul {
  display: flex;
  list-style: none;
  /* text-align: center; */
  color: #fff;
  gap: 2rem;
  position: fixed;
  right: 0;
  padding-right: 15px;
}
/* display: flex;: กำหนดให้รายการขององค์ประกอบ <ul> แสดงผลในรูปแบบของ Flexbox ซึ่งช่วยให้สามารถจัดการเรียงลำดับและการจัดวางได้ง่ายขึ้น
list-style: none;: กำหนดให้ไม่แสดงเครื่องหมายลูกศรหรือตัวเลขหน้ารายการในรายการของ <ul> เพื่อลบลักษณะของรายการแบบมีลำดับ
color: #fff;: กำหนดสีข้อความในรายการให้เป็นสีขาว (#fff) เพื่อให้ข้อความในรายการมีสีขาว
gap: 2rem;: กำหนดระยะห่างระหว่างรายการในรายการ <ul> เป็น 2 เท่าของหน่วย rem เพื่อให้มีระยะห่างขั้นระหว่างรายการ
position: fixed;: กำหนดให้องค์ประกอบ <ul> มีตำแหน่งแบบแน่นอนและไม่เคลื่อนไหว โดยอ้างอิงจากการเลื่อนของหน้าเว็บ
right: 0;: กำหนดให้องค์ประกอบ <ul> ตั้งอยู่ทางด้านขวาของพื้นที่ที่มีตำแหน่งแน่นอน
padding-right: 15px;: กำหนดความกว้างของการเสริมส่วนของหน้ารายการทางด้านขวาขององค์ประกอบ <ul> ให้มีค่าเท่ากับ 15 พิกเซล เพื่อสร้างช่องว่างด้านขวาของรายการ และเพิ่มการเว้นระยะห่างระหว่างข้อความกับขอบของรายการ
 */

nav a {
  color: white;
  text-decoration: none;
}
/* color: white;: กำหนดสีข้อความของลิงก์ภายใน <nav> ให้เป็นสีขาว เพื่อให้ข้อความในลิงก์แสดงผลเป็นสีขาว
text-decoration: none;: กำหนดให้ไม่มีการเพิ่มสีเข้าไปเมื่อมีการคลิกลิงก์ ซึ่งทำให้ไม่มีเส้นขีดใต้ (underline) ปรากฏบนลิงก์ เพื่อลบการเพิ่มสีหรือเส้นใต้ล่างข้อความที่เป็นลิงก์ภายใน <nav> */
a:hover {
  background-color: red;
  border-radius: 10px;
  padding: 10px;
}
/* background-color: red;: กำหนดสีพื้นหลังของลิงก์เมื่อมีการโฮเวอร์ให้เป็นสีแดง (red) เพื่อเน้นการเลือกลิงก์ที่มีการโฮเวอร์
border-radius: 10px;: กำหนดความโค้งของมุมของลิงก์เมื่อมีการโฮเวอร์ให้เป็นรูปร่างทรงกลม โดยมีค่าความโค้งของมุมเท่ากับ 10px
padding: 10px;: กำหนดการเสริมส่วนของลิงก์เมื่อมีการโฮเวอร์ให้มีการเพิ่มพื้นที่รอบขอบของลิงก์ โดยมีขนาดความกว้างและความสูงของการเสริมส่วนเท่ากับ 10px ทั้งด้านบน-ล่าง และด้านซ้าย-ขวา */
.logo {
  justify-content: flex-start;
  align-items: flex-start;
  font-size: 2rem;
  color: #fff;
  margin-right: 700px;
}
/* justify-content: flex-start;: กำหนดให้องค์ประกอบ .logo มีการจัดวางของสมาชิกภายในโดยให้ชิดด้านซ้ายของพื้นที่ที่กำหนดให้เป็น Flexbox container (หรือองค์ประกอบที่ใช้ flexbox layout) นี้
align-items: flex-start;: กำหนดให้องค์ประกอบ .logo มีการจัดวางสมาชิกภายในโดยให้ชิดด้านบนของพื้นที่ที่กำหนดให้เป็น Flexbox container นี้
font-size: 2rem;: กำหนดขนาดตัวอักษรของเนื้อหาในองค์ประกอบ .logo เท่ากับ 2 เท่าของขนาดพื้นฐาน (root size) หรือที่เรียกว่า rem
color: #fff;: กำหนดสีของเนื้อหาในองค์ประกอบ .logo เป็นสีขาว (#fff)
margin-right: 700px;: กำหนดระยะห่างด้านขวาขององค์ประกอบ .logo เท่ากับ 700 พิกเซล เพื่อให้มีการเลื่อนออกไปทางด้านขวาของพื้นที่ที่กำหนดเอาไว้ โดยมีผลในการจัดวางองค์ประกอบ .logo ในที่นี้ในพื้นที่ที่มีการใช้งานการจัดการเรียงลำดับโดยใช้ Flexbox layout ไปทางด้านซ้ายของพื้นที่นั้นๆ อย่างไรก็ตามการกำหนด margin-right จะไม่มีผลกระทบต่อการจัดการเรียงลำดับโดยใช้ flexbox layout นั้น เนื่องจาก margin จะไม่มีผลกับองค์ประกอบภายใน Flexbox container ในทางปฏิบัติ การกำหนด margin ส่วนข้างหรือขอบบน/ขอบล่าง ใน Flexbox มักจะใช้การกำหนด padding หรือการใช้ flexbox properties เพื่อควบคุมการเว้นระยะห่างและการจัดวางแทน */
.btn {
  margin-top: 30px;

  color: white;
  cursor: pointer;
  border-radius: 25px;
  padding: 1rem 2rem;
}
/* margin-top: 30px;: กำหนดระยะห่างด้านบนขององค์ประกอบ .btn ให้มีค่าเท่ากับ 30px เพื่อเป็นการเพิ่มระยะห่างด้านบนของปุ่มเทียบกับองค์ประกอบอื่น
color: white;: กำหนดสีของข้อความในปุ่มให้เป็นสีขาว เพื่อให้ข้อความในปุ่มแสดงผลเป็นสีขาว
cursor: pointer;: กำหนดเคอร์เซอร์ในปุ่มให้มีรูปแบบของตัวชี้เมื่อเอาเมาส์ไปชี้ปุ่ม ซึ่งให้บ่งชี้ว่าปุ่มนี้เป็นปุ่มที่สามารถคลิกได้
border-radius: 25px;: กำหนดรัศมีของมุมของปุ่มให้มีค่าเท่ากับ 25px เพื่อให้มีมุมโค้งในส่วนของเส้นขอบของปุ่ม
padding: 1rem 2rem;: กำหนดการเสริมส่วนของปุ่มด้านภายใน เพื่อให้ปุ่มมีขนาดกว้างและสูงขึ้น โดยมีขนาดความกว้างเท่ากับ 2 หน่วย rem และความสูงเท่ากับ 1 หน่วย rem ทั้งด้านบนและด้านล่างของข้อความในปุ่ม */
img {
  width: 100%;

  object-fit: cover;
  object-position: center;
}
/* width: 100%;: กำหนดให้ความกว้างของรูปภาพเท่ากับ 100% ของพื้นที่ที่รับรู้ของตัวกำหนด (parent container) ซึ่งทำให้รูปภาพขยายหรือย่อตามขนาดของพื้นที่ที่มีอยู่
object-fit: cover;: กำหนดให้รูปภาพปรับขนาดโดยจัดให้ครอบคลุมพื้นที่ที่กำหนดไว้ โดยไม่ทำให้สัดส่วนของรูปภาพเสียหาย ซึ่งจะทำให้รูปภาพถูกตัดเล็กน้อยในกรณีที่สัดส่วนของพื้นที่ที่รับรู้และของรูปไม่เท่ากัน
object-position: center;: กำหนดให้จุดศูนย์กลางของรูปภาพอยู่ตรงกลางของพื้นที่ที่กำหนดไว้ ซึ่งจะช่วยให้รูปภาพถูกจัดวางในตำแหน่งที่ต้องการในกรณีที่มีการตัดขอบของรูปแบบกำหนดใหม่โดย object-fit ถ้าไม่ได้ระบุ object-position จุดศูนย์กลางของรูปจะอยู่ที่มุมบนซ้ายของพื้นที่ที่กำหนดไว้ */
header {
  background-image: url(image/photo-1589302168068-964664d93dc0.avif);
  background-position: center;
  background-size: cover;

  height: 100vh;
}
/* background-image: url(image/photo-1589302168068-964664d93dc0.avif);: กำหนดรูปภาพที่ใช้เป็นพื้นหลังของ <header> โดยระบุ URL ของไฟล์รูปภาพในรูปแบบ AVIF
background-position: center;: กำหนดตำแหน่งของรูปภาพใน <header> ให้อยู่ที่ตรงกลางของพื้นที่ที่กำหนดไว้
background-size: cover;: กำหนดให้รูปภาพภายใน <header> ขยายหรือย่อขนาดให้ครอบคลุมพื้นที่ของ <header> โดยไม่เสียสัดส่วนและปรับตำแหน่งของรูปภาพให้พอดีกับพื้นที่
height: 100vh;: กำหนดความสูงของ <header> ให้เท่ากับ 100% ของความสูงของหน้าจอ (viewport height) ซึ่งทำให้ <header> มีความสูงเท่ากับหน้าจอทั้งหมดและแสดงครอบคลุมทั้งหน้าจอได้ทั้งหมดโดยไม่ต้องเลื่อนแนวนอนหรือแนวตั้ง */
#home {
  display: flex;

  text-align: center;
  flex-direction: column;
  padding: 220px 200px;
  color: white;
  justify-content: center;
  align-items: center;

  text-align: center;
}
/* display: flex;: กำหนดให้เนื้อหาภายในองค์ประกอบ "#home" แสดงผลในรูปแบบของ Flexbox ซึ่งช่วยให้สามารถจัดการเรียงลำดับและการจัดวางได้อย่างยืดหยุ่น
text-align: center;: กำหนดให้เนื้อหาภายในองค์ประกอบ "#home" แสดงผลตามแนวนอนในศูนย์กลางของพื้นที่
flex-direction: column;: กำหนดให้เนื้อหาภายในองค์ประกอบ "#home" แสดงผลในลำดับแนวตั้ง ซึ่งเนื้อหาจะถูกจัดวางในคอลัมน์เดียว
padding: 220px 200px;: กำหนดระยะห่างของขอบภายในขององค์ประกอบ "#home" โดยมีค่าของ padding ด้านบนและด้านล่างเท่ากับ 220px และด้านซ้ายและด้านขวาเท่ากับ 200px
color: white;: กำหนดสีข้อความในองค์ประกอบ "#home" เป็นสีขาว
justify-content: center;: กำหนดให้เนื้อหาภายในองค์ประกอบ "#home" จัดวางตามแนวแกนตั้ง (main axis) ให้อยู่ตรงกลางของพื้นที่
align-items: center;: กำหนดให้เนื้อหาภายในองค์ประกอบ "#home" จัดวางตามแนวแกนนอน (cross axis) ให้อยู่ตรงกลางของพื้นที่
text-align: center;: กำหนดให้เนื้อหาทั้งหมดภายในองค์ประกอบ "#home" แสดงผลตามแนวนอนในศูนย์กลางของพื้นที่ ซึ่งจะมีผลกับข้อความภายในองค์ประกอบที่ไม่ได้อยู่ภายในองค์ประกอบ flex container ด้วย โดยภายในองค์ประกอบ flex container ตัวเองมีการจัดการด้วย justify-content: center; และ align-items: center; อยู่แล้ว */
.title {
  text-align: center;
  width: 100%;
  color: yellow;
}
/* text-align: center;: กำหนดให้เนื้อหาภายในองค์ประกอบที่มีคลาส .title แสดงผลตามแนวนอนในศูนย์กลางของพื้นที่
width: 100%;: กำหนดความกว้างขององค์ประกอบที่มีคลาส .title เท่ากับ 100% ของพื้นที่ที่องค์ประกอบนี้ถูกวางอยู่ภายใน
color: yellow;: กำหนดสีของข้อความในองค์ประกอบที่มีคลาส .title เป็นสีเหลือง (yellow) */
#menu {
  padding: 0;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
  grid-gap: 20px 40px;
  background: rgb(245, 242, 242);
  min-height: 100vh;
}
/* padding: 0;: กำหนดให้ไม่มีการเสริมส่วนของพื้นที่ภายในขององค์ประกอบ "#menu" เพื่อลบการเสริมส่วนเริ่มต้นที่อาจมีอยู่
display: grid;: กำหนดให้องค์ประกอบ "#menu" แสดงผลด้วยการใช้เทคนิคของ CSS Grid Layout
grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));: กำหนดรูปแบบของคอลัมน์ในการจัดวางของ Grid โดยให้คอลัมน์ที่สร้างขึ้นมีความกว้างอย่างน้อย 350px และมีความกว้างอย่างมากไม่เกิน 1fr (แสดงว่าคอลัมน์จะขยายตัวให้เต็มพื้นที่พอสมควร)
grid-gap: 20px 40px;: กำหนดระยะห่างระหว่างแถวและคอลัมน์ใน Grid เท่ากับ 20px ในแนวดิ่งและ 40px ในแนวนอน
background: rgb(245, 242, 242);: กำหนดสีพื้นหลังขององค์ประกอบ "#menu" เป็นสีเทาอ่อน
min-height: 100vh;: กำหนดความสูงขั้นต่ำขององค์ประกอบ "#menu" เท่ากับ 100% ของความสูงของหน้าจอ (viewport height) เพื่อให้องค์ประกอบ "#menu" มีความสูงอย่างน้อยเท่ากับความสูงของหน้าจอโดยไม่ว่างเปล่า และจะขยายตัวตามเนื้อหาในกรณีที่มีเนื้อหามากขึ้น */
.heading {
  background: rgb(245, 242, 242);
  color: #373333;
  margin-bottom: 30px;
  padding: 60px 0 30px 0;
  grid-column: 1/-1;
  text-align: center;
}
/* background: rgb(245, 242, 242);: กำหนดสีพื้นหลังขององค์ประกอบ ".heading" เป็นสีเทาอ่อน (rgb(245, 242, 242))
color: #373333;: กำหนดสีข้อความภายในองค์ประกอบ ".heading" เป็นสีดำ (hex code: #373333)
margin-bottom: 30px;: กำหนดระยะห่างด้านล่างขององค์ประกอบ ".heading" เท่ากับ 30px เพื่อเพิ่มช่องว่างด้านล่างขององค์ประกอบกับองค์ประกอบถัดไป
padding: 60px 0 30px 0;: กำหนดระยะห่างภายในขององค์ประกอบ ".heading" ในลำดับด้านบน ล่าง ซ้าย และขวา ตามลำดับ โดยมีค่าเท่ากับ 60px ด้านบน และ 30px ด้านล่าง
grid-column: 1/-1;: กำหนดให้องค์ประกอบ ".heading" ขยายตัวในทุกคอลัมน์ของ Grid โดยเริ่มจากคอลัมน์ที่ 1 ไปจนถึงคอลัมน์สุดท้าย (-1) ซึ่งหมายถึงคอลัมน์สุดท้ายของ Grid
text-align: center;: กำหนดให้ข้อความภายในองค์ประกอบ ".heading" แสดงผลตามแนวนอนในศูนย์กลางของพื้นที่ */
.heading>h3 {
  font-weight: 600;
  font-size: 22px;
  letter-spacing: 5px;
}
/* font-weight: 600;: กำหนดความหนาของตัวอักษรใน <h3> เป็น 600 หรือเป็นตัวหนา
font-size: 22px;: กำหนดขนาดตัวอักษรใน <h3> เท่ากับ 22px
letter-spacing: 5px;: กำหนดระยะห่างระหว่างตัวอักษรใน <h3> เท่ากับ 5px โดยให้ระยะห่างนี้มีขนาดเท่ากันทั้งหมด ทำให้อักษรแต่ละตัวมีระยะห่างต่างกันอย่างชัดเจน */
.card {
  display: grid;
  position: relative;
  grid-template-rows: auto 1fr;
  border-radius: 15px;
  box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
  margin: 10px 20px;
}
/* display: grid;: กำหนดให้องค์ประกอบ ".card" แสดงผลด้วยการใช้เทคนิคของ CSS Grid Layout
position: relative;: กำหนดให้องค์ประกอบ ".card" มีตำแหน่งแบบเก็บค่าตำแหน่งของมันเอง (relative position) เพื่อให้สามารถกำหนดตำแหน่งขององค์ประกอบย่อยภายในได้
grid-template-rows: auto 1fr;: กำหนดรูปแบบของแถวในการจัดวางของ Grid โดยให้มีแถวแรกมีความสูงเท่ากับขนาดของเนื้อหา (auto) และแถวที่สองมีความสูงเท่ากับส่วนที่เหลือในพื้นที่ของ Grid (1fr)
border-radius: 15px;: กำหนดความโค้งของมุมขององค์ประกอบ ".card" เท่ากับ 15px เพื่อสร้างมุมโค้ง
box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);: กำหนดเงาขององค์ประกอบ ".card" ด้วยการใช้ boxShadow ที่มีความกว้างและความสูงเป็น 0 (ไม่มีเงาในแนวแกน X และแกน Y) และมีความเข้มของสีเท่ากับ 15px และสีของเงาเป็นสีดำทึบ (rgba(0, 0, 0, 0.1))
margin: 10px 20px;: กำหนดระยะห่างขอบขององค์ประกอบ ".card" โดยมีค่าขอบด้านบนและด้านล่างเท่ากับ 10px และขอบด้านซ้ายและขวาเท่ากับ 20px */
.card img {
  position: relative;
  width: 100%;
  height: 50vh;
  border-radius: 15px 15px 0 0;
}
/* position: relative;: กำหนดให้ตำแหน่งของภาพเป็นแบบเก็บค่าตำแหน่ง (relative position) เพื่อให้สามารถใช้การจัดวางและการแก้ไขตำแหน่งได้ในภายหลัง
width: 100%;: กำหนดให้ความกว้างของภาพเท่ากับ 100% ของพื้นที่ที่ภาพตั้งอยู่ภายใน (ในที่นี้คือ .card)
height: 50vh;: กำหนดความสูงของภาพให้เป็น 50% ของความสูงของหน้าจอ (viewport height) เพื่อให้ภาพมีความสูงที่เหมาะสมและไม่ขยายตัวมากเกินไป
border-radius: 15px 15px 0 0;: กำหนดรูปร่างของมุมของภาพให้มีมุมโค้งด้านบนซ้ายและด้านบนขวา เพื่อให้มีลักษณะที่เสมือนกับมุมโค้งของ .card ด้านบนโดยภาพจะไม่มีมุมโค้งที่ด้านล่างโดยใช้ค่าที่เหลือจากมุมโค้งด้านบนทั้งสองข้าง */
.details {
  padding: 20px 10px;
  display: grid;
  grid-template-rows: auto 1fr 50px;
  grid-row-gap: 15px;
}
/* padding: 20px 10px;: กำหนดระยะห่างระหว่างขอบภายในขององค์ประกอบ .details โดยมีค่าขอบด้านบนและด้านล่างเท่ากับ 20px และค่าขอบด้านซ้ายและขวาเท่ากับ 10px
display: grid;: กำหนดให้องค์ประกอบ .details แสดงผลด้วยการใช้เทคนิคของ CSS Grid Layout
grid-template-rows: auto 1fr 50px;: กำหนดรูปแบบของแถวในการจัดวางของ Grid โดยมีแถวแรกมีความสูงเท่ากับขนาดของเนื้อหา (auto) และแถวที่สองมีความสูงเท่ากับส่วนที่เหลือในพื้นที่ของ Grid (1fr) และแถวที่สามมีความสูงเท่ากับ 50px
grid-row-gap: 15px;: กำหนดระยะห่างระหว่างแถวใน Grid เท่ากับ 15px ในทิศทางแนวดิ่ง ทำให้องค์ประกอบย่อยภายในมีระยะห่างกันในแนวดิ่งโดยอัตโนมัติ */
.details-sub {
  display: grid;
  grid-template-columns: auto auto;
}
/* display: grid;: กำหนดให้องค์ประกอบ .details-sub แสดงผลด้วยการใช้เทคนิคของ CSS Grid Layout
grid-template-columns: auto auto;: กำหนดรูปแบบของคอลัมน์ในการจัดวางของ Grid โดยมีคอลัมน์แรกมีความกว้างเท่ากับขนาดของเนื้อหา (auto) และคอลัมน์ที่สองมีความกว้างเท่ากับขนาดของเนื้อหาเช่นกัน (auto) ทำให้องค์ประกอบย่อยภายใน .details-sub แสดงผลในสองคอลัมน์ขนาดเท่ากัน */
.details-sub h5 { 
  font-weight: 600; 
  font-size: 18px;
}
/* font-weight: 600;: กำหนดความหนาของตัวอักษรใน <h5> เป็น 600 หรือเป็นตัวหนา
font-size: 18px;: กำหนดขนาดตัวอักษรใน <h5> เท่ากับ 18px */
.price {
  text-align: right;
}
/* text-align: right;: กำหนดให้ข้อความภายในองค์ประกอบ .price แสดงผลอยู่ที่ขอบขวาของพื้นที่ที่กำหนด นั่นหมายความว่าข้อความจะถูกจัดวางให้อยู่ทางขวาของพื้นที่ที่องค์ประกอบ .price ตั้งอยู่ */
.details p {
  color: #6f6f6f;
  font-size: 15px;
  line-height: 25px;
  align-self: stretch;
}

.details button {
  /* background-color: #cb202d; */
  border: none;
  color: white;
  font-size: 16px;
  font-weight: 600;
  border-radius: 7px;
  width: 180px;
}

#about {
  padding: 25px 0;
}
/* display: flex;: เป็นการกำหนดว่า elements ทั้งหมดภายใน container นี้จะใช้ Flexbox เป็นวิธีในการจัดวาง ซึ่งจะช่วยให้สามารถจัดการตำแหน่งและขนาดของ elements ได้อย่างยืดหยุ่นและง่ายต่อการควบคุม
justify-content: center;: จะทำให้ elements ที่อยู่ภายใน container ถูกจัดวางตามแนวนอนของ container และจะถูกจัดตำแหน่งตามศูนย์กลางของ container
align-items: center;: จะทำให้ elements ที่อยู่ภายใน container ถูกจัดวางตามแนวตั้งของ container และจะถูกจัดตำแหน่งตามศูนย์กลางของ container
flex-wrap: wrap;: กำหนดให้ elements ที่อยู่ใน container สามารถขึ้นบรรทัดใหม่ได้เมื่อมีการเติมพื้นที่ไม่พอใน container
padding: 0 100px;: กำหนดขอบเขตของ padding ใน container โดยมีค่าเท่ากับ 0 ด้านบนและด้านล่าง และ 100px ด้านซ้ายและด้านขวา */
.about_row {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-wrap: wrap;
  padding: 0 100px;
}

.about_column {
  flex: 1;
}
/* ใช้สำหรับการสร้างลักษณะของปุ่มที่มี id เป็น "btn1" โดยมีคุณสมบัติดังนี้:
margin-top: 20px;: กำหนดการเว้นระยะห่างด้านบนของปุ่มเท่ากับ 20px ซึ่งจะทำให้มีช่องว่างด้านบนของปุ่ม
padding: 10px 10px;: กำหนดขอบเขตของ padding ซึ่งมีค่าเท่ากับ 10px ทั้งด้านบนและด้านล่าง และ 10px ทั้งด้านซ้ายและด้านขวาของปุ่ม ซึ่งจะช่วยเพิ่มพื้นที่ภายในปุ่ม
border-radius: 15px;: กำหนดรัศมีของมุมของปุ่มให้เป็น 15px ซึ่งจะทำให้มีมุมโค้งที่สวยงาม และไม่มีเส้นมุมที่คมเข้ม */
#btn1 {
  margin-top: 20px;
  padding: 10px 10px;
  border-radius: 15px;
}

.about_column img {
  width: 500px;
  height: 500px;
  border-radius: 50%;
  object-fit: fill;
  margin: auto;
}
/* ใช้สำหรับสร้างสไตล์ของ elements ที่อยู่ภายในคลาส "about_column" โดยส่วนสำคัญของโค้ดคือ:
width: 500px; และ height: 500px;: กำหนดความกว้างและความสูงของภาพให้มีขนาด 500px ทั้งที่
border-radius: 50%;: กำหนดให้มีเส้นขอบมนเหมือนวงกลม โดยรัศมีของวงกลมคือ 50% ของความกว้างหรือความสูงของภาพ เช่นถ้าภาพมีขนาด 500px x 500px จะได้รัศมีวงกลมเท่ากับ 250px
object-fit: fill;: กำหนดว่าภาพจะเต็มพื้นที่ที่กำหนดไว้ โดยการยืดหรือย่อภาพให้เต็มพื้นที่ที่กำหนดไว้โดยที่สัดส่วนของภาพอาจเปลี่ยนแปลงได้
margin: auto;: กำหนดให้ภาพอยู่ตรงกลางของพื้นที่ที่เหลือเหนือภาพ */

.title {
  color: #373333;
  margin-bottom: 30px;
  padding: 50px 0 30px 0;
  text-align: center;
}
/* ใช้สำหรับสร้างสไตล์ของ elements ที่มี ID เป็น "order" โดยมีคุณสมบัติดังนี้:
background: rgb(214, 214, 214);: กำหนดสีพื้นหลังของ elements ที่มี ID เป็น "order" เป็นสีเทาอ่อน (RGB 214, 214, 214)
color: white;: กำหนดสีข้อความภายใน elements ที่มี ID เป็น "order" เป็นสีขาว
min-height: 100vh;: กำหนดความสูงขั้นต่ำของ elements ที่มี ID เป็น "order" เท่ากับความสูงของ viewport โดยใช้หน่วยวัดความสูงของ viewport (vh) ซึ่งจะทำให้ elements นี้มีความสูงอย่างน้อยเท่ากับความสูงของหน้าต่างเว็บเบราว์เซอร์ */

#order {
  background: rgb(214, 214, 214);
  color: white;
  min-height: 100vh;
}
/* ใช้สำหรับสร้างสไตล์ของ element ที่มี id เป็น "order" โดยมีคุณสมบัติดังนี้:
background: rgb(214, 214, 214);: กำหนดสีพื้นหลังของ element ที่มี id เป็น "order" เป็นสีเทา (RGB 214, 214, 214)
color: white;: กำหนดสีข้อความภายใน element ที่มี id เป็น "order" เป็นสีขาว เพื่อให้ข้อความเห็นได้อย่างชัดเจนบนพื้นหลังสีเทา
min-height: 100vh;: กำหนดความสูงขั้นต่ำของ element ที่มี id เป็น "order" เท่ากับ 100% ของความสูงของ viewport (viewport height) เพื่อให้ element นี้มีความสูงอย่างน้อยเท่ากับความสูงของหน้าจอ */

.title1 {
  color: #373333;
  margin-bottom: 30px;
  padding: 50px 0 30px 0;
  text-align: center;
}
/* ใช้สำหรับสร้างสไตล์ของ elements ที่มีคลาสเป็น "title1" โดยมีคุณสมบัติดังนี้:
color: #373333;: กำหนดสีข้อความภายใน elements ที่มีคลาส "title1" ให้เป็นสีเทาเข้ม (hex code: #373333)
margin-bottom: 30px;: กำหนดการเว้นระยะห่างด้านล่างของ elements ที่มีคลาส "title1" ให้มีค่าเท่ากับ 30px เพื่อสร้างระยะห่างระหว่าง elements ที่มีคลาส "title1" กับ elements ที่อยู่ด้านล่าง
padding: 50px 0 30px 0;: กำหนดการเพิ่มพื้นที่ภายในของ elements ที่มีคลาส "title1" โดยมีค่าเท่ากับ 50px ด้านบนและ 30px ด้านล่าง เพื่อให้มีพื้นที่ว่างด้านบนและด้านล่างของข้อความ
text-align: center;: กำหนดให้ข้อความภายใน elements ที่มีคลาส "title1" มีการจัดวางตำแหน่งแนวนอนที่กึ่งกลาง (center) */

form {
  width: 450px;
  background-color: white;

  box-shadow: 0 0 20px 0 rgb(113, 113, 113);
  margin: auto;
  margin-top: -20px;
  margin-bottom: 10px;
  border-radius: 20px;
}
/* ใช้สำหรับสร้างสไตล์ของ elements ที่เป็น form โดยมีคุณสมบัติดังนี้:
width: 450px;: กำหนดความกว้างของ form เป็น 450px เพื่อให้มีขนาดพอดีกับเนื้อหาภายใน form
background-color: white;: กำหนดสีพื้นหลังของ form เป็นสีขาว
box-shadow: 0 0 20px 0 rgb(113, 113, 113);: กำหนดเงาให้กับ form โดยมีค่าต่างๆดังนี้:
0 0: ค่าแรกและค่าสองเป็นตำแหน่งของเงาในแนวแกน x และ y ซึ่งในที่นี้คือไม่มีเงาในทิศทางที่แสดง (ในแกน x และแกน y)
20px: ค่าที่สามเป็นขนาดของเงา ซึ่งในที่นี้คือเงามีขนาด 20px
rgb(113, 113, 113): ค่าที่สี่คือสีของเงา ในที่นี้คือสีเทา (rgb(113, 113, 113))
margin: auto;: กำหนดให้มีการจัดวาง form ตามแนวนอนศูนย์กลางของพื้นที่ของ parent element
margin-top: -20px;: กำหนดการเว้นระยะห่างด้านบนของ form เป็น -20px เพื่อย้าย form ไปด้านบน
margin-bottom: 10px;: กำหนดการเว้นระยะห่างด้านล่างของ form เป็น 10px
border-radius: 20px;: กำหนดให้มีการโค้งมนของมุมของ form เป็น 20px เพื่อให้มีลักษณะมนเหมือนวงกลม */

.inp_box {
  width: 350px;
  height: 37px;
  /* margin-top: 20px; */
  margin: 25px 45px 0 45px;

  padding: 0 10px;
  border-radius: 14px;
  border: 1px solid #777;
  outline: none;
}
/* ใช้สำหรับสร้างสไตล์ของ elements ที่มีคลาสเป็น "inp_box" (input box) โดยมีคุณสมบัติดังนี้:
width: 350px;: กำหนดความกว้างของ input box เป็น 350px
height: 37px;: กำหนดความสูงของ input box เป็น 37px
margin: 25px 45px 0 45px;: กำหนดการเว้นระยะห่างของ input box โดยมีค่าเท่ากับ 25px ด้านบน, 45px ด้านซ้ายและด้านขวา, และ 0 ด้านล่าง
padding: 0 10px;: กำหนดขอบเขตของ padding ภายใน input box โดยมีค่าเท่ากับ 0 ด้านบนและด้านล่าง และ 10px ด้านซ้ายและด้านขวาของ input box
border-radius: 14px;: กำหนดให้มีรัศมีของมุมของ input box เป็น 14px ซึ่งจะทำให้มุมของ input box มีการโค้งแบบสวยงาม
border: 1px solid #777;: กำหนดเส้นขอบของ input box เป็นเส้น massi มีความหนา 1px และสีเท่ากับ #777 (สีเทาเข้ม)
outline: none;: กำหนดให้ไม่มีเส้นขอบเมื่อ input box ได้รับ focus */

.text_area {
  height: 160px;
  padding-top: 10px;
}
/* ใช้สำหรับสร้างสไตล์ของ elements ที่มีคลาสเป็น "text_area" (textarea) โดยมีคุณสมบัติดังนี้:
height: 160px;: กำหนดความสูงของ textarea เป็น 160px ซึ่งหมายถึงว่าจะมีความสูงเท่ากับ 160px
padding-top: 10px;: กำหนดการเพิ่มพื้นที่เสริมด้านบนของ textarea ให้มีค่าเท่ากับ 10px เพื่อเพิ่มระยะห่างระหว่างข้อความที่ป้อนและด้านบนของ textarea */

.btn2 {
  border-radius: 20px;
  margin: 20px 45px;
  padding: 0 10px;
  /* margin: auto; */
  width: 30%;
  color: aqua;
}
/* ใช้สำหรับสร้างสไตล์ของ elements ที่มีคลาสเป็น "btn2" ซึ่งมีคุณสมบัติดังนี้:
border-radius: 20px;: กำหนดให้มีรัศมีของมุมของปุ่มเป็น 20px ซึ่งจะทำให้มุมของปุ่มมีการโค้งแบบสวยงาม
margin: 20px 45px;: กำหนดการเว้นระยะห่างของปุ่ม โดยมีค่าเท่ากับ 20px ด้านบนและด้านล่าง และ 45px ด้านซ้ายและด้านขวา
padding: 0 10px;: กำหนดขอบเขตของ padding ภายในปุ่ม โดยมีค่าเท่ากับ 0 ด้านบนและด้านล่าง และ 10px ด้านซ้ายและด้านขวาของปุ่ม
width: 30%;: กำหนดความกว้างของปุ่มให้เท่ากับ 30% ของพื้นที่หน้าจอ
color: aqua;: กำหนดสีข้อความภายในปุ่มให้เป็นสี aqua (สีฟ้าเขียว) */

textarea {
  height: 150px;
  padding-top: 10px;
}
/* ใช้สำหรับสร้างสไตล์ของ elements ที่เป็น textarea (กล่องข้อความหลายบรรทัด) โดยมีคุณสมบัติดังนี้:
height: 150px;: กำหนดความสูงของ textarea เป็น 150px ซึ่งหมายถึงว่าจะมีความสูงเท่ากับ 150px
padding-top: 10px;: กำหนดการเพิ่มพื้นที่เสริมด้านบนของ textarea ให้มีค่าเท่ากับ 10px เพื่อเพิ่มระยะห่างระหว่างข้อความที่ป้อนและด้านบนของ textarea */

.btn2 {
  border-radius: 15px;
  color: #fff;
  margin-top: 18px;
  padding: 10px;
}
/* ใช้สำหรับสร้างสไตล์ของ elements ที่มีคลาสเป็น "btn2" (button ที่มีคลาสนี้) โดยมีคุณสมบัติดังนี้:
border-radius: 15px;: กำหนดให้มีรัศมีของมุมของปุ่มเป็น 15px ซึ่งจะทำให้มุมของปุ่มมีการโค้งแบบสวยงาม
color: #fff;: กำหนดสีของข้อความภายในปุ่มให้เป็นสีขาว (#fff) เพื่อให้ข้อความมองเห็นได้อย่างชัดเจน
margin-top: 18px;: กำหนดการเว้นระยะด้านบนของปุ่มเท่ากับ 18px ซึ่งจะทำให้มีช่องว่างด้านบนของปุ่ม
padding: 10px;: กำหนดขอบเขตของ padding ภายในปุ่มทั้งด้านทั้ง 4 ด้านให้มีค่าเท่ากับ 10px เพื่อเพิ่มพื้นที่ภายในปุ่ม */

button {
  background-color: rgb(0, 16, 135);
  color: white;
  border: none;
  cursor: pointer;
}
/* ใช้สำหรับสร้างสไตล์ของ elements ที่เป็นปุ่ม (button) โดยมีคุณสมบัติดังนี้:
background-color: rgb(0, 16, 135);: กำหนดสีพื้นหลังของปุ่มให้เป็นสีน้ำเงินเข้ม (RGB 0, 16, 135) ค่า RGB ที่กำหนดจะเป็นสีน้ำเงินที่มีความเข้มมาก
color: white;: กำหนดสีข้อความภายในปุ่มให้เป็นสีขาว เพื่อให้ข้อความแสดงอยู่บนพื้นหลังสีน้ำเงินอย่างชัดเจน
border: none;: กำหนดให้ปุ่มไม่มีเส้นขอบ หรือ border เพื่อเพิ่มความสดใสและง่ายต่อการอ่านของปุ่ม
cursor: pointer;: กำหนดรูปแบบของ cursor เป็นรูปแบบของตัวชี้ เมื่อผู้ใช้ชี้ไปที่ปุ่ม จะแสดงเป็น icon ของการชี้ที่แสดงถึงว่าปุ่มนี้สามารถคลิกได้ */

button:hover {
  background-color: rgb(246, 0, 0);
}
/* กำหนดสไตล์เมื่อเกิดเหตุการณ์ hover กับ elements ที่เป็นปุ่ม (button) ซึ่งมีคุณสมบัติดังนี้:
button:hover: เป็นเลือกอิลิเมนต์เมื่อเกิดเหตุการณ์ hover กับ elements ที่เป็นปุ่ม (button) นั่นคือเมื่อผู้ใช้โฮเวอร์ (hover) หน้าปุ่ม
background-color: rgb(246, 0, 0);: กำหนดสีพื้นหลังของปุ่มเมื่อเกิดเหตุการณ์ hover ให้เป็นสีแดง (rgb(246, 0, 0)) นั่นคือเมื่อผู้ใช้โฮเวอร์ (hover) หน้าปุ่ม พื้นหลังของปุ่มจะเปลี่ยนเป็นสีแดง  */

footer {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 1rem 2rem;
  width: 100%;
  background-color: #262626;
  color: white;
}
/* ใช้สำหรับสร้างลักษณะของ footer บนหน้าเว็บไซต์ โดยมีคุณสมบัติดังนี้:
display: flex;: กำหนดให้ footer เป็น flex container เพื่อให้สามารถใช้ Flexbox เพื่อจัดการองค์ประกอบภายใน footer ได้อย่างยืดหยุ่น
justify-content: center;: จัดเรียง elements ภายใน footer ให้อยู่ตรงกลางของพื้นที่ที่กำหนด
align-items: center;: จัดการตำแหน่งแนวตั้งของ elements ใน footer ให้อยู่ตรงกลางของพื้นที่ที่กำหนด
padding: 1rem 2rem;: กำหนดขอบเขตของ padding ใน footer โดยมีค่าเท่ากับ 1rem ด้านบนและด้านล่าง และ 2rem ด้านซ้ายและด้านขวา
width: 100%;: กำหนดความกว้างของ footer เท่ากับ 100% ของพื้นที่ที่เป็นหน่วยวัด (viewport width)
background-color: #262626;: กำหนดสีพื้นหลังของ footer เป็นสีเทาเข้ม (hex code: #262626)
color: white;: กำหนดสีข้อความภายใน footer เป็นสีขาว */
overlay{
  color: aqua;
  
}
/* กำหนดคุณสมบัติสำหรับ elements ที่มีชื่อเรียกว่า "overlay" ดังนี้:
color: aqua;: กำหนดสีของข้อความภายใน elements ที่มีชื่อเรียกว่า "overlay" ให้มีสี aqua (สีฟ้าเขียว) นั่นคือทุกข้อความภายใน elements นี้จะถูกเปลี่ยนเป็นสี aqua หรือสีฟ้าเขียว */